import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.Bl20_RFa.js";const u=JSON.parse('{"title":"tm_yamldecode - Functions - Configuration Language","description":"The tm_yamldecode function decodes a YAML string into a representation of its\\nvalue.","frontmatter":{"title":"tm_yamldecode - Functions - Configuration Language","description":"The tm_yamldecode function decodes a YAML string into a representation of its\\nvalue."},"headers":[],"relativePath":"cli/code-generation/functions/tm_yamldecode.md","filePath":"cli/code-generation/functions/tm_yamldecode.md"}'),t={name:"cli/code-generation/functions/tm_yamldecode.md"},n=e(`<h1 id="tm-yamldecode-function" tabindex="-1"><code>tm_yamldecode</code> Function <a class="header-anchor" href="#tm-yamldecode-function" aria-label="Permalink to &quot;\`tm_yamldecode\` Function&quot;">​</a></h1><p><code>tm_yamldecode</code> parses a string as a subset of YAML, and produces a representation of its value.</p><p>This function supports a subset of <a href="https://yaml.org/spec/1.2/spec.html" target="_blank" rel="noreferrer">YAML 1.2</a>, as described below.</p><p>This function maps YAML values to <a href="https://developer.hashicorp.com/terraform/language/expressions/types" target="_blank" rel="noreferrer">Terraform language values</a> in the following way:</p><table><thead><tr><th>YAML type</th><th>Terramate type</th></tr></thead><tbody><tr><td><code>!!str</code></td><td><code>string</code></td></tr><tr><td><code>!!float</code></td><td><code>number</code></td></tr><tr><td><code>!!int</code></td><td><code>number</code></td></tr><tr><td><code>!!bool</code></td><td><code>bool</code></td></tr><tr><td><code>!!map</code></td><td><code>object(...)</code> with attribute types determined per this table</td></tr><tr><td><code>!!seq</code></td><td><code>tuple(...)</code> with element types determined per this table</td></tr><tr><td><code>!!null</code></td><td>The Terraform language <code>null</code> value</td></tr><tr><td><code>!!timestamp</code></td><td><code>string</code> in <a href="https://tools.ietf.org/html/rfc3339" target="_blank" rel="noreferrer">RFC 3339</a> format</td></tr><tr><td><code>!!binary</code></td><td><code>string</code> containing base64-encoded representation</td></tr></tbody></table><p>The Terramate language automatic type conversion rules mean that you don&#39;t usually need to worry about exactly what type is produced for a given value, and can just use the result in an intuitive way.</p><p>Note though that the mapping above is ambiguous -- several different source types map to the same target type -- and so round-tripping through <code>tm_yamldecode</code> and then <code>yamlencode</code> cannot produce an identical result.</p><p>YAML is a complex language and it supports a number of possibilities that the Terraform language&#39;s type system cannot represent. Therefore this YAML decoder supports only a subset of YAML 1.2, with restrictions including the following:</p><ul><li><p>Although aliases to earlier anchors are supported, cyclic data structures (where a reference to a collection appears inside that collection) are not. If <code>tm_yamldecode</code> detects such a structure then it will return an error.</p></li><li><p>Only the type tags shown in the above table (or equivalent alternative representations of those same tags) are supported. Any other tags will result in an error.</p></li><li><p>Only one YAML document is permitted. If multiple documents are present in the given string then this function will return an error.</p></li></ul><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_yamldecode(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;hello: world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;hello&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;world&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_yamldecode(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_yamldecode(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;{a: &amp;foo [1, 2, 3], b: *foo}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;a&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    1,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    2,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    3,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;b&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    1,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    2,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    3,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_yamldecode(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;{a: &amp;foo [1, *foo, 3]}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> call</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Call</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;tm_yamldecode&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cannot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> refer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> anchor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foo&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inside</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">its</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> own</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> definition.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_yamldecode(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;{a: !not-supported foo}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> call</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Call</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;tm_yamldecode&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unsupported</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;!not-supported&quot;.</span></span></code></pre></div><h2 id="related-functions" tabindex="-1">Related Functions <a class="header-anchor" href="#related-functions" aria-label="Permalink to &quot;Related Functions&quot;">​</a></h2><ul><li><a href="./tm_jsondecode"><code>tm_jsondecode</code></a> is a similar operation using JSON instead of YAML.</li><li><a href="./tm_yamlencode"><code>tm_yamlencode</code></a> performs the opposite operation, <em>encoding</em> a value as YAML.</li></ul>`,13),l=[n];function o(p,h,r,d,k,c){return i(),a("div",null,l)}const g=s(t,[["render",o]]);export{u as __pageData,g as default};
