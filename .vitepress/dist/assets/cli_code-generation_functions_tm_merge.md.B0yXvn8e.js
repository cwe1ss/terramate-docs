import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.Bl20_RFa.js";const c=JSON.parse('{"title":"tm_merge - Functions - Configuration Language","description":"The tm_merge function takes an arbitrary number maps or objects, and returns a\\nsingle map or object that contains a merged set of elements from all\\narguments.","frontmatter":{"title":"tm_merge - Functions - Configuration Language","description":"The tm_merge function takes an arbitrary number maps or objects, and returns a\\nsingle map or object that contains a merged set of elements from all\\narguments."},"headers":[],"relativePath":"cli/code-generation/functions/tm_merge.md","filePath":"cli/code-generation/functions/tm_merge.md"}'),n={name:"cli/code-generation/functions/tm_merge.md"},e=t(`<h1 id="tm-merge-function" tabindex="-1"><code>tm_merge</code> Function <a class="header-anchor" href="#tm-merge-function" aria-label="Permalink to &quot;\`tm_merge\` Function&quot;">​</a></h1><p><code>tm_merge</code> takes an arbitrary number of maps or objects, and returns a single map or object that contains a merged set of elements from all arguments.</p><p>If more than one given map or object defines the same key or attribute, then the one that is later in the argument sequence takes precedence. If the argument types do not match, the resulting type will be an object matching the type structure of the attributes after the merging rules have been applied.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_merge(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{a=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;b&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c=&quot;d&quot;},</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {e=&quot;f&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c=&quot;z&quot;}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;a&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;c&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;z&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;e&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;f&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_merge(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{a=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;b&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">},</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {a=[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,2],</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c=&quot;z&quot;},</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {d=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;a&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    1,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;c&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;z&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;d&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The following example uses the expansion symbol (...) to transform the value into separate arguments. Refer to <a href="https://developer.hashicorp.com/terraform/language/expressions/function-calls#expanding-function-arguments" target="_blank" rel="noreferrer">Expanding Function Argument</a> for details.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_merge([</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{a=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;b&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c=&quot;d&quot;},</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {},</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {e=&quot;f&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c=&quot;z&quot;}]...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;a&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;c&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;z&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;e&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;f&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,8),h=[e];function l(p,k,r,o,F,d){return a(),i("div",null,h)}const u=s(n,[["render",l]]);export{c as __pageData,u as default};
