import{_ as e,c as t,o as a,a4 as s}from"./chunks/framework.Bl20_RFa.js";const m=JSON.parse('{"title":"Tag Filter","description":"The tag filter returns a list of stacks containing tags that satisfy the filter query.","frontmatter":{"title":"Tag Filter","description":"The tag filter returns a list of stacks containing tags that satisfy the filter query."},"headers":[],"relativePath":"cli/orchestration/tag-filter.md","filePath":"cli/orchestration/tag-filter.md"}'),o={name:"cli/orchestration/tag-filter.md"},n=s(`<h1 id="tag-filter" tabindex="-1">Tag Filter <a class="header-anchor" href="#tag-filter" aria-label="Permalink to &quot;Tag Filter&quot;">​</a></h1><p>The <strong>Tag Filter</strong> can be used in multiple Terramate features:</p><ul><li><a href="./../stacks/configuration#stackafter-setstringoptional">stack.after</a></li><li><a href="./../stacks/configuration#stackbefore-setstringoptional">stack.before</a></li><li><code>terramate &lt;cmd&gt; --tags &lt;filter&gt;</code></li></ul><p>The filter returns a list of stacks containing <code>tags</code> that satisfy the filter query. The query language is best explained with some examples but a formal definition can be found <a href="#filter-grammar">here</a>.</p><p>Let&#39;s say the project has multiple stacks and some of them having the tag <code>abc</code>, others having the tag <code>xyz</code> and some having of them having both.</p><p>Then:</p><ul><li><code>abc</code> selects the stacks containing the tag <code>abc</code>.</li><li><code>xyz</code> selects the stacks containing the tag <code>xyz</code>.</li><li><code>abc:xyz</code> selects the stacks containing both <code>abc</code> <strong>and</strong> <code>xyz</code> tags.</li><li><code>abc,xyz</code> selects the stacks containing <code>abc</code> <strong>or</strong> <code>xyz</code> tags.</li></ul><p>The <code>:</code> character defines the <strong>AND</strong> operation and the <code>,</code> character the <strong>OR</strong> operation. They can be freely combined but no explicit grouping is supported (yet).</p><p>Examples:</p><ul><li><code>tf,pulumi,cfn</code> selects the stacks containing the tags <code>tf</code> or <code>pulumi</code> or <code>cfn</code>.</li><li><code>app:k8s:frontend</code> selects only stacks containing the three tags: <code>app</code> &amp;&amp; <code>k8s</code> &amp;&amp; <code>frontend</code>.</li><li><code>app:k8s,app:nomad</code> selects only stacks containing the both the tags <code>app</code> <strong>AND</strong> <code>k8s</code> or stacks containing both the tags <code>app</code> <strong>AND</strong> <code>nomad</code>.</li></ul><h2 id="filter-grammar" tabindex="-1">Filter Grammar <a class="header-anchor" href="#filter-grammar" aria-label="Permalink to &quot;Filter Grammar&quot;">​</a></h2><p>Below is the formal grammar definition:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>query         ::= or_term {&#39;,&#39; or_term}</span></span>
<span class="line"><span>or_term       ::= and_term {&#39;:&#39; and_term}</span></span>
<span class="line"><span>and_term      ::= tagname</span></span>
<span class="line"><span>tagname       ::= ident</span></span>
<span class="line"><span>ident         ::= allowedchars { allowedchars } | allowedchars</span></span>
<span class="line"><span>allowedchars  ::= lowercase | digit | &#39;-&#39; | &#39;_&#39;</span></span>
<span class="line"><span>digit         ::= &#39;0&#39; ... &#39;9&#39;</span></span>
<span class="line"><span>lowercase     ::= &#39;a&#39; | &#39;b&#39; | ... | &#39;z&#39;</span></span></code></pre></div><p>The <code>ident</code> definition is a simplification and you should refer to <a href="./../stacks/configuration#stacktags-setstringoptional">stack.tags</a> for the correct definition (in prose) for the expected declaration of tag names.</p>`,14),c=[n];function i(r,l,d,p,h,g){return a(),t("div",null,c)}const u=e(o,[["render",i]]);export{m as __pageData,u as default};
