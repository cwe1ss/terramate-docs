import{_ as s,c as e,o as a,a4 as t}from"./chunks/framework.Bl20_RFa.js";const y=JSON.parse('{"title":"tm_ternary | Terramate Functions","description":"The tm_ternary is a replacement for the HCL ternary operator supporting\\npartial evaluation and different expression types in each ternary branch.\\n","frontmatter":{"title":"tm_ternary | Terramate Functions","description":"The tm_ternary is a replacement for the HCL ternary operator supporting\\npartial evaluation and different expression types in each ternary branch.\\n"},"headers":[],"relativePath":"cli/code-generation/functions/tm_ternary.md","filePath":"cli/code-generation/functions/tm_ternary.md"}'),i={name:"cli/code-generation/functions/tm_ternary.md"},n=t('<h1 id="tm-ternary-function" tabindex="-1"><code>tm_ternary</code> Function <a class="header-anchor" href="#tm-ternary-function" aria-label="Permalink to &quot;`tm_ternary` Function&quot;">​</a></h1><p>This function is a replacement for HCL ternary operator <code>a ? b : c</code>. It circumvent some limitations, like both expressions of the ternary producing values of the same type. The <code>tm_ternary</code> function is not even limited to returning actual values, it can also return expressions. Only the first boolean parameter must be fully evaluated. If it is true, the first expression is returned, if it is false the second expression is returned.</p><p>The function signature is:</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tm_ternary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, expr, expr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expr</span></span></code></pre></div><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tm_ternary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data1, access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data2)</span></span></code></pre></div><p>Will return the expression <code>access.data2</code>. While:</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tm_ternary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data1, access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data2)</span></span></code></pre></div><p>Will return the expression <code>access.data1</code>.</p>',9),r=[n];function l(h,p,o,c,d,k){return a(),e("div",null,r)}const g=s(i,[["render",l]]);export{y as __pageData,g as default};
