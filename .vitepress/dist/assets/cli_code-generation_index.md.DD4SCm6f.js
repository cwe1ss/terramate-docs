import{_ as e,c as s,o as a,a4 as i}from"./chunks/framework.Bl20_RFa.js";const E=JSON.parse('{"title":"Code Generation","description":"Learn how to keep your stacks DRY by generating files such as Terraform, Kubernetes Manifests and more.","frontmatter":{"title":"Code Generation","description":"Learn how to keep your stacks DRY by generating files such as Terraform, Kubernetes Manifests and more."},"headers":[],"relativePath":"cli/code-generation/index.md","filePath":"cli/code-generation/index.md"}'),t={name:"cli/code-generation/index.md"},n=i(`<h1 id="code-generation" tabindex="-1">Code Generation <a class="header-anchor" href="#code-generation" aria-label="Permalink to &quot;Code Generation&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>Terramate CLI supports the generation of code in stacks. This section contains usage documentation and examples of the code generation in Terramate and all available strategies.</p><p>Generating code in stacks can help keep your stacks DRY (think generating files such as Terraform provider configuration or Kubernetes manifests). This is especially useful whenever you want to conditionally generate code for stacks based on stack metadata such as tags or paths.</p><p>Currently, the following code generation strategies are available:</p><ul><li><a href="./generate-hcl">HCL generation</a> with <code>stack</code> <a href="#generation-context">context</a> to generate Terraform, OpenTofu and other HCL configurations.</li><li><a href="./generate-file">File generation</a> with <code>root</code> and <code>stack</code> <a href="#generation-context">context</a> to generate arbitrary files such as JSON and YAML.</li></ul><p>E.g., the following generates a simple file using the <a href="./generate-file">file generation</a> strategy.</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># config.tm.hcl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate_file</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;file.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;file contents&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="generate-code" tabindex="-1">Generate code <a class="header-anchor" href="#generate-code" aria-label="Permalink to &quot;Generate code&quot;">​</a></h2><p>The <a href="./../cmdline/generate"><code>generate</code></a> command generates all files configured by the available code generation strategies.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">terramate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate</span></span></code></pre></div><p>This command always runs the code generation in your entire Terramate project and ensures that all generated files are up to date.</p><h2 id="hierarchical-code-generation" tabindex="-1">Hierarchical code generation <a class="header-anchor" href="#hierarchical-code-generation" aria-label="Permalink to &quot;Hierarchical code generation&quot;">​</a></h2><p>Code generation can be defined and used anywhere in a <a href="./../projects/configuration">Terramate Project</a>.</p><p>Any stack that is part of the filesystem tree reachable from a code generation strategy configuration will be a selected target to generate code in. This means a configuration to generate code can be defined at the root level, reach all stacks, and trigger code generation in all stacks if not limited by <a href="#conditional-code-generation">conditional code generation</a> or <a href="./generate-hcl#filter-based-code-generation">stack filters</a>.</p><h3 id="failure-modes" tabindex="-1">Failure modes <a class="header-anchor" href="#failure-modes" aria-label="Permalink to &quot;Failure modes&quot;">​</a></h3><p>There is no overriding or merging behavior for code generation blocks. Blocks defined at different levels with the same label aren&#39;t allowed, resulting in failure for the overall code generation process.</p><h2 id="import" tabindex="-1">Import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;Import&quot;">​</a></h2><p>Terramate configuration files that define code generation strategies can also be imported using the <code>import</code> block.</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/modules/generate_providers.tm.hcl&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>For details, please see the <a href="./../configuration/#import-block-schema">import documentation</a>.</p><h2 id="generation-context" tabindex="-1">Generation context <a class="header-anchor" href="#generation-context" aria-label="Permalink to &quot;Generation context&quot;">​</a></h2><p>Code generation supports two execution contexts:</p><ul><li><strong>stack</strong>: generates code relative to the stack where it&#39;s defined.</li><li><strong>root</strong>: generates code outside of stacks.</li></ul><p>The <code>stack</code> context gives access to all code generation features, such as:</p><ul><li><a href="./variables/globals">Globals</a></li><li><a href="./variables/metadata">All Metadata</a></li><li><a href="./functions/">Functions</a></li><li><a href="./variables/lets">Lets</a></li><li><a href="#assertions">Assertions</a></li></ul><p>But the <code>root</code> context gives access to:</p><ul><li><a href="./variables/metadata#project-metadata">Project Metadata</a></li><li><a href="./functions/">Functions</a></li><li><a href="./variables/lets">Lets</a></li></ul><p>If not specified the default generation context is <code>stack</code>. The <code>generate_hcl</code> block doesn&#39;t support changing the <code>context</code>, it will always be of type <code>stack</code>. The <code>generate_file</code> block supports the <code>context</code> attribute which you can explicitly change to <code>root</code>.</p><p><strong>Example:</strong></p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate_file</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;/file.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> root</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;something&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="labels" tabindex="-1">Labels <a class="header-anchor" href="#labels" aria-label="Permalink to &quot;Labels&quot;">​</a></h2><p>All code generation blocks use labels to identify the block and define where the generated code will be saved but they have different constraints depending on the <a href="#generation-context">generation context</a>.</p><p>For <code>stack</code> context, the labels must follow the constraints below:</p><ul><li>It is a relative path in the form <code>&lt;dir&gt;/&lt;filename&gt;</code> or just <code>&lt;filename&gt;</code></li><li>It is always defined with <code>/</code> independent on the OS you are working on</li><li>It does not contain <code>../</code> (code can only be generated inside the stack)</li><li>It does not start with <code>./</code></li><li>It is not a symbolic link</li><li>It is not a stack</li><li>It is unique on the whole hierarchy of a stack for all blocks with condition=true.</li></ul><p>For <code>root</code> context, the constraints are:</p><ul><li>It is an absolute path in the form <code>/&lt;dir&gt;/&lt;filename&gt;</code> or just <code>/&lt;filename&gt;</code>.</li><li>It is always defined with <code>/</code> independent on the OS you are working on</li><li>It does not contain <code>../</code> (code can only be generated inside the project root)</li><li>It is not a symbolic link</li><li>It is not a stack</li><li>It is unique on the whole hierarchy for all blocks with condition=true.</li></ul><p><strong>Example:</strong></p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The label defines that the code generation will</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># generate a file named &#39;_generate_main.tf&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate_hcl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;_generate_main.tf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resource</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;aws_vpc&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cidr_block</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;10.0.0.0/16&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="conditional-code-generation" tabindex="-1">Conditional code generation <a class="header-anchor" href="#conditional-code-generation" aria-label="Permalink to &quot;Conditional code generation&quot;">​</a></h2><p>Terramate offers different ways to generate code conditionally.</p><h3 id="stack-filters-path-based-code-generation" tabindex="-1">Stack filters - path-based code generation <a class="header-anchor" href="#stack-filters-path-based-code-generation" aria-label="Permalink to &quot;Stack filters - path-based code generation&quot;">​</a></h3><p>Stack Filters can be used to trigger the generation of code only within matching stacks identified by the stack absolute path. Globbing support in the path filters allows pattern matching with the hierarchy, thus targeting stacks in directories with specific names or following a specific pattern. Stack filters will be extended to support more matching strategies on other metadata.</p><p>Stack Filters allow path-based code generation on the stack path within the repository or within a project. They are defined using <code>generate_hcl.stack_filter</code> blocks and are explained in the <a href="./generate-hcl">Generate HCL</a> and <a href="./generate-file">Generate File</a> sections. They can be combined with conditions and are evaluated before conditions.</p><p><strong>Example:</strong></p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate_hcl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;vpc.tf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  stack_filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    project_paths</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;/path/to/specific/stack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># match exact path</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;/path/to/some/stacks/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># match stacks in a directory</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;/path/to/many/stacks/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># match all stacks within a tree</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resource</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;aws_vpc&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cidr_block</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;10.0.0.0/16&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="conditions" tabindex="-1">Conditions <a class="header-anchor" href="#conditions" aria-label="Permalink to &quot;Conditions&quot;">​</a></h3><p>Conditions allow for more complex targeting of stacks using Terramate Globals, Terramate Metadata and Terramate Functions. As complex calculations require more CPU time and access more data, the execution of conditions is significantly slower compared to using Stack Filters.</p><p>The following list names some examples of what conditions could be used for:</p><ul><li>Path-based Code Generation (prefer Stack Filters or use in combination with Stack Filters for large amounts of stacks)</li><li>Tag-based Code Generation</li><li>Generation of code based on the state of Terramate Globals</li><li><a href="./variables/metadata">Metadata</a>-based Code Generation when using the <code>terramate</code> variable namespace to access more stack details.</li><li>Any combination of the above</li><li>Any complex calculation using Terramate Functions or Terramate Variables</li></ul><p><strong>Example:</strong></p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generate Terraform backend configuration</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># for stacks that are tagged with &quot;terraform&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate_hcl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;_terramate_generated_backend.tf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  condition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tm_contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(terramate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tags, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;terraform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    terraform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      backend</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;s3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        region</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terraform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">backend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">region</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        bucket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terraform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">backend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bucket</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;terraform/stacks/by-id/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terramate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/terraform.tfstate&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        encrypt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        dynamodb_table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;terraform_state&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="assertions" tabindex="-1">Assertions <a class="header-anchor" href="#assertions" aria-label="Permalink to &quot;Assertions&quot;">​</a></h2><p>Assertions can be used to fail code generation for one or more stacks if some pre-condition is not met, helping to catch mistakes in your configuration.</p><p>Assertions can be only used when the <a href="#generation-context">generation context</a> is of type <code>stack</code> and it has the following fields:</p><ul><li><code>assertion</code> <em>(optional boolean)</em> The <code>condition</code> attribute supports any expression that renders to a boolean.</li><li><code>message</code> <em>(optional string)</em> Obligatory, must evaluate to string</li><li><code>warning</code> <em>(optional string)</em> Must evaluate to boolean. Defaults to <code>false</code>.</li></ul><p>All fields can contain expressions using Terramate Variables (<code>let</code>, <code>global</code>, and <code>terramate</code> namespaces) and all Terramate Functions are supported.</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  assertion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;assertion failed, details: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> != </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>When the <strong>assertion</strong> is <code>false</code> in the context of a stack, code generation for that stack will fail and the reported error will be the one provided on the <strong>message</strong> field. The stack won&#39;t be touched, no files will be changed/created/deleted.</p><p>Optionally the <strong>warning</strong> field can be defined and if it is evaluated to <code>true</code> then a false <strong>assertion</strong> will <strong>not</strong> generate an error. Code will be generated, but a warning output will be shown during code generation.</p><p>The <strong>assert</strong> block has hierarchical behavior, any assert blocks defined in a directory will be applied to all stacks inside this directory. For example, an <strong>assert</strong> block defined on the root of a project will be applied to all stacks in the project.</p><p>Assert blocks can also be defined inside <code>generate_hcl</code> and <code>generate_file</code> blocks. When inside one of those blocks it has the same semantics as described above, except that it will have access to locally scoped data like the <code>let</code> namespace.</p><h2 id="best-practices" tabindex="-1">Best practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best practices&quot;">​</a></h2><p>We recommend the following best practices when working with code generation.</p><h3 id="add-generated-files-to-your-git-repository" tabindex="-1">Add generated files to your Git repository <a class="header-anchor" href="#add-generated-files-to-your-git-repository" aria-label="Permalink to &quot;Add generated files to your Git repository&quot;">​</a></h3><p>Commit the generated files to the repository. This can be archived either by manually running <code>terramate generate</code> locally or by automating <code>terramate generate</code> in your CI/CD pipelines. In any case, the generated files should be available to the Pull Request reviewer so they can spot misconfigurations.</p><h3 id="use-a-prefix-for-generated-files" tabindex="-1">Use a prefix for generated files <a class="header-anchor" href="#use-a-prefix-for-generated-files" aria-label="Permalink to &quot;Use a prefix for generated files&quot;">​</a></h3><p>We recommend prefixing generated files with <code>_terramate_generated_</code> (e.g., <code>_terramate_generated_main.tf</code>) or similar to be able to easily separate generated files from non-generated files.</p><p>In addition to the recommended prefix, each generated file contains a header to indicate that if users modify the generated files all changes will be overwritten by the <code>terramate generate</code>.</p><p>Example:</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TERRAMATE: GENERATED AUTOMATICALLY DO NOT EDIT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">....</span></span></code></pre></div>`,71),l=[n];function o(h,r,p,d,c,k){return a(),s("div",null,l)}const u=e(t,[["render",o]]);export{E as __pageData,u as default};
