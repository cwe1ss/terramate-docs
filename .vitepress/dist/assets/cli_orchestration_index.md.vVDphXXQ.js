import{_ as e,c as t,o as a,a4 as o}from"./chunks/framework.Bl20_RFa.js";const m=JSON.parse('{"title":"Orchestration","description":"Learn how to orchestrate the execution of commands or sequences of commands in stacks using the orchestration in Terramate.","frontmatter":{"title":"Orchestration","description":"Learn how to orchestrate the execution of commands or sequences of commands in stacks using the orchestration in Terramate."},"headers":[],"relativePath":"cli/orchestration/index.md","filePath":"cli/orchestration/index.md"}'),r={name:"cli/orchestration/index.md"},n=o('<h1 id="orchestration" tabindex="-1">Orchestration <a class="header-anchor" href="#orchestration" aria-label="Permalink to &quot;Orchestration&quot;">​</a></h1><p>One of the most essential features of Terramate CLI is its ability to orchestrate the execution of commands in stacks, which allows to run commands such as <code>terraform apply</code> or <code>kubectl apply</code> across different stacks without having to navigate to each project stack individually.</p><p>Even in the case of environments where stacks are interdependent, Terramate’s orchestration ensures that operations are performed in the correct order, maintaining dependencies and preventing conflicts.</p><p>The orchestration engine provides various strategies for selecting stacks and configuring the execution order, which are explained in the following pages of this section.</p><h2 id="default-order-of-execution" tabindex="-1">Default order of execution <a class="header-anchor" href="#default-order-of-execution" aria-label="Permalink to &quot;Default order of execution&quot;">​</a></h2><p>In Terramate Projects, we can arrange stacks in a filesystem hierarchy. Parent stacks are always executed before their child stacks in this arrangement. Thus, if stack A includes stack B, stack A will always be executed first.</p><p>This provides the ability to rearrange stacks, which can improve the mirroring of your cloud infrastructure and control the sequence of execution, all without changing any code.</p><p>This ordering will fit well with the natural project organization and eliminate the need for hard-coded dependencies between stacks.</p><p>Per default, commands such as <a href="./../cmdline/run"><code>run</code></a> or <a href="./../cmdline/list"><code>list</code></a> follow the default order of execution so that parent stacks will run before child stacks.</p><p>The default order of execution can be altered in a stack&#39;s configuration. For details, please see <a href="./../stacks/configuration#configuring-the-order-of-execution">configuring the order of execution</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can use the <a href="./../cmdline/list">list --run-order</a> command to understand the order of execution of your stacks.</p></div>',11),i=[n];function s(c,d,h,l,u,f){return a(),t("div",null,i)}const g=e(r,[["render",s]]);export{m as __pageData,g as default};
