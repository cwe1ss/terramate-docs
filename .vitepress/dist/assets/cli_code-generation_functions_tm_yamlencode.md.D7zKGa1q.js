import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.Bl20_RFa.js";const u=JSON.parse('{"title":"tm_yamlencode - Functions - Configuration Language","description":"The tm_yamlencode function encodes a given value as a YAML string.","frontmatter":{"title":"tm_yamlencode - Functions - Configuration Language","description":"The tm_yamlencode function encodes a given value as a YAML string."},"headers":[],"relativePath":"cli/code-generation/functions/tm_yamlencode.md","filePath":"cli/code-generation/functions/tm_yamlencode.md"}'),e={name:"cli/code-generation/functions/tm_yamlencode.md"},n=t(`<h1 id="tm-yamlencode-function" tabindex="-1"><code>tm_yamlencode</code> Function <a class="header-anchor" href="#tm-yamlencode-function" aria-label="Permalink to &quot;\`tm_yamlencode\` Function&quot;">​</a></h1><p><code>tm_yamlencode</code> encodes a given value to a string using <a href="https://yaml.org/spec/1.2/spec.html" target="_blank" rel="noreferrer">YAML 1.2</a> block syntax.</p><p>This function maps <a href="https://developer.hashicorp.com/terraform/language/expressions/types" target="_blank" rel="noreferrer">Terraform language values</a> to YAML tags in the following way:</p><table><thead><tr><th>Terraform type</th><th>YAML type</th></tr></thead><tbody><tr><td><code>string</code></td><td><code>!!str</code></td></tr><tr><td><code>number</code></td><td><code>!!float</code> or <code>!!int</code></td></tr><tr><td><code>bool</code></td><td><code>!!bool</code></td></tr><tr><td><code>list(...)</code></td><td><code>!!seq</code></td></tr><tr><td><code>set(...)</code></td><td><code>!!seq</code></td></tr><tr><td><code>tuple(...)</code></td><td><code>!!seq</code></td></tr><tr><td><code>map(...)</code></td><td><code>!!map</code></td></tr><tr><td><code>object(...)</code></td><td><code>!!map</code></td></tr><tr><td>Null value</td><td><code>!!null</code></td></tr></tbody></table><p><code>tm_yamlencode</code> uses the implied syntaxes for all of the above types, so it does not generate explicit YAML tags.</p><p>Because the YAML format cannot fully represent all of the Terramate language types, passing the <code>tm_yamlencode</code> result to <code>tm_yamldecode</code> will not produce an identical value, but the Terraform language automatic type conversion rules mean that this is rarely a problem in practice.</p><p>YAML is a superset of JSON, and so where possible we recommend generating JSON using <a href="./tm_jsonencode"><code>tm_jsonencode</code></a> instead, even if a remote system supports YAML. JSON syntax is equivalent to flow-style YAML and Terraform can present detailed structural change information for JSON values in plans, whereas Terraform will treat block-style YAML just as a normal multi-line string. However, generating YAML may improve readability if the resulting value will be directly read or modified in the remote system by humans.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_yamlencode(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;:&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;, &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;:&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">d</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;: &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;: &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">d</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_yamlencode({&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;:[1, 2, 3], &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;: &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">baz</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;: &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">baz</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">- 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">- 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">- 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_yamlencode({&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;:[1, {&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;:&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;,&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;:&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">d</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;}, 3], &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;: &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">baz</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;: &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">baz</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">- 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">- &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;: &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;: &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">d</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">- 3</span></span></code></pre></div><p><code>tm_yamlencode</code> always uses YAML&#39;s &quot;block style&quot; for mappings and sequences, unless the mapping or sequence is empty. To generate flow-style YAML, use <a href="./tm_jsonencode"><code>tm_jsonencode</code></a> instead: YAML flow-style is a superset of JSON syntax.</p><h2 id="related-functions" tabindex="-1">Related Functions <a class="header-anchor" href="#related-functions" aria-label="Permalink to &quot;Related Functions&quot;">​</a></h2><ul><li><a href="./tm_jsonencode"><code>tm_jsonencode</code></a> is a similar operation using JSON instead of YAML.</li><li><a href="./tm_yamldecode"><code>tm_yamldecode</code></a> performs the opposite operation, <em>decoding</em> a YAML string to obtain its represented value.</li></ul>`,12),l=[n];function o(h,d,p,r,k,c){return a(),i("div",null,l)}const g=s(e,[["render",o]]);export{u as __pageData,g as default};
