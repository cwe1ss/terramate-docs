import{_ as e,c as a,o as t,a4 as s}from"./chunks/framework.Bl20_RFa.js";const g=JSON.parse('{"title":"tm_base64decode - Functions - Configuration Language","description":"The tm_base64decode function decodes a string containing a base64 sequence.","frontmatter":{"title":"tm_base64decode - Functions - Configuration Language","description":"The tm_base64decode function decodes a string containing a base64 sequence."},"headers":[],"relativePath":"cli/code-generation/functions/tm_base64decode.md","filePath":"cli/code-generation/functions/tm_base64decode.md"}'),n={name:"cli/code-generation/functions/tm_base64decode.md"},o=s('<h1 id="tm-base64decode-function" tabindex="-1"><code>tm_base64decode</code> Function <a class="header-anchor" href="#tm-base64decode-function" aria-label="Permalink to &quot;`tm_base64decode` Function&quot;">​</a></h1><p><code>tm_base64decode</code> takes a string containing a Base64 character sequence and returns the original string.</p><p>Terraform uses the &quot;standard&quot; Base64 alphabet as defined in <a href="https://tools.ietf.org/html/rfc4648#section-4" target="_blank" rel="noreferrer">RFC 4648 section 4</a>.</p><p>Strings in the Terraform language are sequences of unicode characters rather than bytes, so this function will also interpret the resulting bytes as UTF-8. If the bytes after Base64 decoding are <em>not</em> valid UTF-8, this function produces an error.</p><p>While we do not recommend manipulating large, raw binary data in the Terraform language, Base64 encoding is the standard way to represent arbitrary byte sequences, and so resource types that accept or return binary data will use Base64 themselves, which avoids the need to encode or decode it directly in most cases. Various other functions with names containing &quot;base64&quot; can generate or manipulate Base64 data directly.</p><p><code>tm_base64decode</code> is, in effect, a shorthand for calling <a href="./tm_textdecodebase64"><code>tm_textdecodebase64</code></a> with the encoding name set to <code>UTF-8</code>.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_base64decode(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;SGVsbG8gV29ybGQ=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> World</span></span></code></pre></div><h2 id="related-functions" tabindex="-1">Related Functions <a class="header-anchor" href="#related-functions" aria-label="Permalink to &quot;Related Functions&quot;">​</a></h2><ul><li><a href="./tm_base64encode"><code>tm_base64encode</code></a> performs the opposite operation, encoding the UTF-8 bytes for a string as Base64.</li><li><a href="./tm_textdecodebase64"><code>tm_textdecodebase64</code></a> is a more general function that supports character encodings other than UTF-8.</li><li><a href="./tm_base64gzip"><code>tm_base64gzip</code></a> applies gzip compression to a string and returns the result with Base64 encoding.</li><li><a href="./tm_filebase64"><code>tm_filebase64</code></a> reads a file from the local filesystem and returns its raw bytes with Base64 encoding.</li></ul>',10),i=[o];function r(c,d,l,h,p,u){return t(),a("div",null,i)}const f=e(n,[["render",r]]);export{g as __pageData,f as default};
