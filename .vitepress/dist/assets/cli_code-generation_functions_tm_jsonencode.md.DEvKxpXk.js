import{_ as e,c as t,o,a4 as n}from"./chunks/framework.Bl20_RFa.js";const g=JSON.parse('{"title":"tm_jsonencode - Functions - Configuration Language","description":"The tm_jsonencode function encodes a given value as a JSON string.","frontmatter":{"title":"tm_jsonencode - Functions - Configuration Language","description":"The tm_jsonencode function encodes a given value as a JSON string."},"headers":[],"relativePath":"cli/code-generation/functions/tm_jsonencode.md","filePath":"cli/code-generation/functions/tm_jsonencode.md"}'),a={name:"cli/code-generation/functions/tm_jsonencode.md"},s=n('<h1 id="tm-jsonencode-function" tabindex="-1"><code>tm_jsonencode</code> Function <a class="header-anchor" href="#tm-jsonencode-function" aria-label="Permalink to &quot;`tm_jsonencode` Function&quot;">​</a></h1><p><code>tm_jsonencode</code> encodes a given value to a string using JSON syntax.</p><p>The JSON encoding is defined in <a href="https://tools.ietf.org/html/rfc7159" target="_blank" rel="noreferrer">RFC 7159</a>.</p><p>This function maps <strong>Terramate language values</strong> to JSON values in the following way:</p><table><thead><tr><th>Terramate type</th><th>JSON type</th></tr></thead><tbody><tr><td><code>string</code></td><td>String</td></tr><tr><td><code>number</code></td><td>Number</td></tr><tr><td><code>bool</code></td><td>Bool</td></tr><tr><td><code>list(...)</code></td><td>Array</td></tr><tr><td><code>set(...)</code></td><td>Array</td></tr><tr><td><code>tuple(...)</code></td><td>Array</td></tr><tr><td><code>map(...)</code></td><td>Object</td></tr><tr><td><code>object(...)</code></td><td>Object</td></tr><tr><td>Null value</td><td><code>null</code></td></tr></tbody></table><p>Since the JSON format cannot fully represent all of the Terramate language types, passing the <code>tm_jsonencode</code> result to <code>tm_jsondecode</code> will not produce an identical value, but the automatic type conversion rules mean that this is rarely a problem in practice.</p><p>When encoding strings, this function escapes some characters using Unicode escape sequences: replacing <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>U+2028</code>, and <code>U+2029</code> with <code>\\u003c</code>, <code>\\u003e</code>, <code>\\u0026</code>, <code>\\u2028</code>, and <code>\\u2029</code>.</p><p>The <code>jsonencode</code> command outputs a minified representation of the input.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_jsonencode(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;=&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">world</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;})</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">{&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;:&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">world</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;}</span></span></code></pre></div><h2 id="related-functions" tabindex="-1">Related Functions <a class="header-anchor" href="#related-functions" aria-label="Permalink to &quot;Related Functions&quot;">​</a></h2><ul><li><a href="./tm_jsondecode"><code>tm_jsondecode</code></a> performs the opposite operation, <em>decoding</em> a JSON string to obtain its represented value.</li></ul>',12),d=[s];function i(c,r,l,h,p,u){return o(),t("div",null,d)}const _=e(a,[["render",i]]);export{g as __pageData,_ as default};
