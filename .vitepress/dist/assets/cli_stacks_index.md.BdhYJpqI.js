import{_ as s,c as a,o as e,a4 as t}from"./chunks/framework.Bl20_RFa.js";const u=JSON.parse('{"title":"An Introduction to Stacks","description":"Learn how stacks help you efficiently build and manage infrastructure as code projects at any scale with technologies such as Terraform.","frontmatter":{"title":"An Introduction to Stacks","description":"Learn how stacks help you efficiently build and manage infrastructure as code projects at any scale with technologies such as Terraform."},"headers":[],"relativePath":"cli/stacks/index.md","filePath":"cli/stacks/index.md"}'),n={name:"cli/stacks/index.md"},i=t(`<h1 id="about-stacks" tabindex="-1">About stacks <a class="header-anchor" href="#about-stacks" aria-label="Permalink to &quot;About stacks&quot;">â€‹</a></h1><p>A modular approach is recommended when working with Infrastructure as Code (IaC). This approach breaks the entire infrastructure code and state into <strong>smaller</strong> and <strong>isolated</strong>Â units, often referred to as <strong><em>stacks.</em></strong></p><h2 id="what-are-stacks" tabindex="-1">What are stacks? <a class="header-anchor" href="#what-are-stacks" aria-label="Permalink to &quot;What are stacks?&quot;">â€‹</a></h2><p>A stack is a collection of infrastructure resources that you <em>configure, provision</em> and <em>manage</em> as a unit.</p><p>You can think about a stack as a combination of:</p><ul><li><strong>Infrastructure code</strong> which declares a set of infrastructure assets and their configuration. Terraform code (<code>.tf</code> files) and Cloud Formation (<code>.json</code> files) templates are examples of infrastructure code.</li><li><strong>State</strong> that describes the status of the assets according to the <em>latest deployment</em> (e.g., Terraform state, Pulumi state, etc. - can be either stored locally or in a remote location)</li><li><strong>Configuration</strong> to <em>configure</em> the infrastructure assets and stack behavior (e.g., Variables, Stack Configuration, etc.)</li></ul><p>Using stacks to break up your infrastructure code into manageable pieces is considered an industry standard and provides the following benefits:</p><p><strong>âœ… Reduce run times significantly</strong> by selectively targeting only the required stacks for execution (e.g., only the stacks that have changed in the last PR). Stacks also enable the possibility of parallel execution.</p><p>âœ…Â <strong>Limit the blast radius risk</strong>Â by grouping IaC-managed assets in logical units such as environments, business units, regions or services isolated from each other.</p><p>âœ…Â <strong>Separate management responsibilities across team boundaries</strong>Â by assigning and managing the ownership of stacks to users and teams.</p><p>âœ… <strong>Remove sequential and blocking operations</strong> by enabling parallel development and execution of independent stacks.</p><h2 id="what-are-terramate-stacks" tabindex="-1">What are Terramate Stacks? <a class="header-anchor" href="#what-are-terramate-stacks" aria-label="Permalink to &quot;What are Terramate Stacks?&quot;">â€‹</a></h2><p>Terramate Stacks are Infrastructure as Code agnostic stacks and improve the <strong>developer experience</strong>, <strong>productivity</strong> and <strong>scalability</strong> in Infrastructure as Code projects of any scale.</p><p>You can use Terramate Stacks to manage IaC technologies such as Terraform, OpenTofu, Terragrunt, Kubernetes, AWS Cloud Formation, AWS Cloud Development Kit (CDK), Bicep, and others.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Some IaC technologies, such as AWS Cloud Development Kit (CDK), offer native implementations of stacks, while others donâ€™t. Itâ€™s important to understand that Terramate integrates seamlessly with those approaches. E.g., Terramate can be used to manage Terraform workspaces and CDK Stacks.</p></div><p>Most of the time, Terramate projects manage <em>dozens</em>, <em>hundreds</em>, or even <em>thousands</em> of stacks. This is possible because Terramate CLI provides a neat set of features that allow you to create and manage stacks efficiently at any scale:</p><p>ðŸ‘‰ Stacks can be <strong>created</strong>, <strong>cloned</strong>, and <strong>compared</strong> with a single command.</p><p>ðŸ‘‰ Stacks can be <strong>orchestrated and targeted</strong> for operations, which allows the execution of any command (e.g., <code>terraform apply</code>) over a filtered selection of stacks.</p><p>ðŸ‘‰ The <strong>change detection</strong> allows the execution of only the stacks that contain changes.</p><p>ðŸ‘‰ The <strong>order of execution</strong> of stacks can be configured explicitly in addition to the default order of execution.</p><p>ðŸ‘‰ You can <strong>generate code</strong> in stacks. E.g. you can generate the Terraform backend configuration for all Terraform stacks or a Kubernetes manifest to create a secret for all Kubernetes stacks that follow certain criteria.</p><p>ðŸ‘‰ Stacks can be used to <strong>manage ownership</strong> by leveraging concepts such as <a href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners" target="_blank" rel="noreferrer">CODEOWNERS</a>.</p><p>ðŸ‘‰ Stacks allow you to implement <strong>multi-IaC</strong> and <strong>multi-step</strong> scenarios.</p><p>ðŸ‘‰ Since stacks always manage native infrastructure code, they <strong>integrate all third-party tooling</strong> seamlessly.</p><p>Stacks can be created with the <a href="./../cmdline/create">create</a> command, which creates a directory and a configuration file <code>stack.tm.hcl</code> used to configure the metadata (<code>name</code>, <code>description</code>, <code>id</code>, <code>tags</code>, etc.), <a href="./../orchestration/#order-of-execution">orchestration</a> and <a href="./">change detection behavior</a> of the stack.</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># stack.tm.hcl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Configure the metadata of a stack</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Terraform Example Stack&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;An awesome stack for demo purposes&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;780c4a63-79c2-4725-81f0-06d7c0435426&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tags</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;terraform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;prd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;service-abc&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Optionally the orchestration behavior can be configured</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Ensures that the current stack is executed before the following stacks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  before</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;../stack-a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;../stack-b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Ensures that the current stack is executed after the following stacks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  after</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;../stack-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Optionally the trigger behavior can be configured</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # If any of the configured files changed, this stack will be marked as changed in the change detection.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;/policies/mypolicy.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Forces the execution of a list of stacks whenever the current stack is executed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # even if those don&#39;t contain any changes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wants</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;../stack-d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Ensures that the current stack always gets executed when a list of configured</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # stacks are executed even if the current stack doesn&#39;t contain any changes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wanted_by</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;../stack-e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>For an overview of all stacks configuration options available, please see the docs in <a href="./configuration">stacks configuration</a>.</p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">â€‹</a></h2><p>Stacks are a useful abstraction in Infrastructure as Code that allows us to define small units of assets. A stack consists of infrastructure code, state and configuration. The Terramate concept of stacks includes the inheritance of configuration over the filesystem hierarchy and the ability to orchestrate commands in a targeted set of stacks.</p>`,29),r=[i];function o(l,c,h,p,k,d){return e(),a("div",null,r)}const E=s(n,[["render",o]]);export{u as __pageData,E as default};
