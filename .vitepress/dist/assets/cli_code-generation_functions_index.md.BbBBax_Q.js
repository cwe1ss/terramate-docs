import{_ as e,c as t,o as s,a4 as a}from"./chunks/framework.Bl20_RFa.js";const f=JSON.parse('{"title":"Functions","description":"Terramate provides the same built-in functions as Terraform but prefixed with tm_.","frontmatter":{"title":"Functions","description":"Terramate provides the same built-in functions as Terraform but prefixed with tm_."},"headers":[],"relativePath":"cli/code-generation/functions/index.md","filePath":"cli/code-generation/functions/index.md"}'),i={name:"cli/code-generation/functions/index.md"},n=a(`<h1 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">â€‹</a></h1><p>Terramate Functions can be used in most places where interpolation of expressions is supported.</p><p>Terramate provides the same built-in functions as <a href="https://www.terraform.io/language/functions" target="_blank" rel="noreferrer">Terraform v0.15.13</a> but prefixed with <code>tm_</code>.</p><p>They can be used to do calculations on top of data structures. Terramate supports most of the functions known in Terraform, but all Terramate Functions are prefixed with <code>tm_</code> to identify them in partial code generation and execute them at build time.</p><p>For example, to use the try function when evaluating a global:</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tm_try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Will work exactly as Terraform&#39;s <code>try</code> function. Terramate also provides some custom functions of its own.</p><p>To define each function prototype we use with a small pseudo language where each parameter is defined just with its type and <code>-&gt; type</code> to indicate a return type, if any.</p><p>Most types are self explanatory, one special type though would be <code>expr</code>. When <code>expr</code> is used it means an expression that may not be evaluated into a value of a specific type. This is important for functions that uses partially evaluated expressions as parameters and may return expressions themselves.</p>`,9),o=[n];function r(p,l,c,d,h,u){return s(),t("div",null,o)}const k=e(i,[["render",r]]);export{f as __pageData,k as default};
