import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.Bl20_RFa.js";const u=JSON.parse('{"title":"tm_templatefile - Functions - Configuration Language","description":"The tm_templatefile function reads the file at the given path and renders its\\ncontent as a template.","frontmatter":{"title":"tm_templatefile - Functions - Configuration Language","description":"The tm_templatefile function reads the file at the given path and renders its\\ncontent as a template."},"headers":[],"relativePath":"cli/code-generation/functions/tm_templatefile.md","filePath":"cli/code-generation/functions/tm_templatefile.md"}'),t={name:"cli/code-generation/functions/tm_templatefile.md"},n=e(`<h1 id="tm-templatefile-function" tabindex="-1"><code>tm_templatefile</code> Function <a class="header-anchor" href="#tm-templatefile-function" aria-label="Permalink to &quot;\`tm_templatefile\` Function&quot;">​</a></h1><p><code>tm_templatefile</code> reads the file at the given path and renders its content as a template using a supplied set of template variables.</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tm_templatefile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path, vars)</span></span></code></pre></div><p>The template syntax is the same as for <a href="https://developer.hashicorp.com/terraform/language/expressions/strings#string-templates" target="_blank" rel="noreferrer">string templates</a> in the main Terramate language, including interpolation sequences delimited with <code>\${</code> ... <code>}</code>. This function just allows longer template sequences to be factored out into a separate file for readability.</p><p>The &quot;vars&quot; argument must be an object. Within the template file, each of the keys in the map is available as a variable for interpolation. The template may also use any other function available in the Terramate language, except that recursive calls to <code>tm_templatefile</code> are not permitted. Variable names must each start with a letter, followed by zero or more letters, digits, or underscores.</p><p>Strings in the Terramate language are sequences of Unicode characters, so this function will interpret the file contents as UTF-8 encoded text and return the resulting Unicode characters. If the file contains invalid UTF-8 sequences then this function will produce an error.</p><p>This function can be used only with files that already exist on disk at the beginning of Terramate execution.</p><p><code>*.tmtpl</code> is the recommended naming pattern to use for your template files. Terramate will not prevent you from using other names, but following this convention will help your editor understand the content and likely provide better editing experience as a result.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><h3 id="lists" tabindex="-1">Lists <a class="header-anchor" href="#lists" aria-label="Permalink to &quot;Lists&quot;">​</a></h3><p>Given a template file <code>backends.tmtpl</code> with the following content:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> addr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ip_addrs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${addr}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${port}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">endfor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~}</span></span></code></pre></div><p>The <code>tm_templatefile</code> function renders the template:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_templatefile(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">module</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">}/backends.tmtpl&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ip_addrs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10.0.0.2&quot;]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">backend</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.0.1:8080</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">backend</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.0.2:8080</span></span></code></pre></div><h3 id="maps" tabindex="-1">Maps <a class="header-anchor" href="#maps" aria-label="Permalink to &quot;Maps&quot;">​</a></h3><p>Given a template file <code>config.tmtpl</code> with the following content:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config_key,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config_value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${config_key} </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${config_value}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">endfor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~}</span></span></code></pre></div><p>The <code>tm_templatefile</code> function renders the template:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>tm_templatefile(</span></span>
<span class="line"><span>               &quot;\${path.module}/config.tmtpl&quot;,</span></span>
<span class="line"><span>               {</span></span>
<span class="line"><span>                 config = {</span></span>
<span class="line"><span>                   &quot;x&quot;   = &quot;y&quot;</span></span>
<span class="line"><span>                   &quot;foo&quot; = &quot;bar&quot;</span></span>
<span class="line"><span>                   &quot;key&quot; = &quot;value&quot;</span></span>
<span class="line"><span>                 }</span></span>
<span class="line"><span>               }</span></span>
<span class="line"><span>              )</span></span>
<span class="line"><span>set foo = bar</span></span>
<span class="line"><span>set key = value</span></span>
<span class="line"><span>set x = y</span></span></code></pre></div><h3 id="generating-json-or-yaml-from-a-template" tabindex="-1">Generating JSON or YAML from a template <a class="header-anchor" href="#generating-json-or-yaml-from-a-template" aria-label="Permalink to &quot;Generating JSON or YAML from a template&quot;">​</a></h3><p>If the string you want to generate will be in JSON or YAML syntax, it&#39;s often tricky and tedious to write a template that will generate valid JSON or YAML that will be interpreted correctly when using lots of individual interpolation sequences and directives.</p><p>Instead, you can write a template that consists only of a single interpolated call to either <a href="./tm_jsonencode"><code>tm_jsonencode</code></a> or <a href="./tm_yamlencode"><code>tm_yamlencode</code></a>, specifying the value to encode using <a href="https://developer.hashicorp.com/terraform/language/expressions" target="_blank" rel="noreferrer">normal Terraform expression syntax</a> as in the following examples:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${jsonencode({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;backends&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [for addr in ip_addrs : &quot;\${addr}:\${port}&quot;],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})}</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${yamlencode({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;backends&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [for addr in ip_addrs : &quot;\${addr}:\${port}&quot;],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})}</span></span></code></pre></div><p>Given the same input as the <code>backends.tmtpl</code> example in the previous section, this will produce a valid JSON or YAML representation of the given data structure, without the need to manually handle escaping or delimiters. In the latest examples above, the repetition based on elements of <code>ip_addrs</code> is achieved by using a <a href="https://developer.hashicorp.com/terraform/language/expressions/for" target="_blank" rel="noreferrer"><code>for</code> expression</a> rather than by using <a href="https://developer.hashicorp.com/terraform/language/expressions/strings#directives" target="_blank" rel="noreferrer">template directives</a>.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;backends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;10.0.0.1:8080&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;10.0.0.2:8080&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>If the resulting template is small, you can choose instead to write <code>tm_jsonencode</code> or <code>tm_yamlencode</code> calls inline in your main configuration files, and avoid creating separate template files at all:</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">locals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  backend_config_json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jsonencode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;backends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ip_addrs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">addr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>For more information, see the main documentation for <a href="./tm_jsonencode"><code>tm_jsonencode</code></a> and <a href="./tm_yamlencode"><code>tm_yamlencode</code></a>.</p><h2 id="related-functions" tabindex="-1">Related Functions <a class="header-anchor" href="#related-functions" aria-label="Permalink to &quot;Related Functions&quot;">​</a></h2><ul><li><a href="./tm_file"><code>tm_file</code></a> reads a file from disk and returns its literal contents without any template interpretation.</li></ul>`,31),l=[n];function p(h,o,r,d,k,c){return i(),a("div",null,l)}const E=s(t,[["render",p]]);export{u as __pageData,E as default};
