import{_ as s,c as t,o as i,a4 as a}from"./chunks/framework.Bl20_RFa.js";const E=JSON.parse('{"title":"tm_flatten - Functions - Configuration Language","description":"The tm_flatten function eliminates nested lists from a list.","frontmatter":{"title":"tm_flatten - Functions - Configuration Language","description":"The tm_flatten function eliminates nested lists from a list."},"headers":[],"relativePath":"cli/code-generation/functions/tm_flatten.md","filePath":"cli/code-generation/functions/tm_flatten.md"}'),e={name:"cli/code-generation/functions/tm_flatten.md"},n=a('<h1 id="tm-flatten-function" tabindex="-1"><code>tm_flatten</code> Function <a class="header-anchor" href="#tm-flatten-function" aria-label="Permalink to &quot;`tm_flatten` Function&quot;">​</a></h1><p><code>tm_flatten</code> takes a list and replaces any elements that are lists with a flattened sequence of the list contents.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_flatten([[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;a&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b&quot;],</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [], [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]])</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>If any of the nested lists also contain directly-nested lists, these too are flattened recursively:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_flatten([[[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;a&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b&quot;],</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []], [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]])</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>Indirectly-nested lists, such as those in maps, are <em>not</em> flattened.</p><h2 id="related-functions" tabindex="-1">Related Functions <a class="header-anchor" href="#related-functions" aria-label="Permalink to &quot;Related Functions&quot;">​</a></h2><ul><li><a href="./tm_setproduct"><code>tm_setproduct</code></a> finds all of the combinations of multiple lists or sets of values, which can also be useful when preparing collections for use with <code>for_each</code> constructs.</li></ul>',9),l=[n];function h(o,p,c,d,k,r){return i(),t("div",null,l)}const f=s(e,[["render",h]]);export{E as __pageData,f as default};
