import{_ as s,c as e,o as a,a4 as n}from"./chunks/framework.Bl20_RFa.js";const b=JSON.parse('{"title":"tm_cidrsubnet - Functions - Configuration Language","description":"The tm_cidrsubnet function calculates a subnet address within a given IP network\\naddress prefix.","frontmatter":{"title":"tm_cidrsubnet - Functions - Configuration Language","description":"The tm_cidrsubnet function calculates a subnet address within a given IP network\\naddress prefix."},"headers":[],"relativePath":"cli/code-generation/functions/tm_cidrsubnet.md","filePath":"cli/code-generation/functions/tm_cidrsubnet.md"}'),t={name:"cli/code-generation/functions/tm_cidrsubnet.md"},i=n(`<h1 id="tm-cidrsubnet-function" tabindex="-1"><code>tm_cidrsubnet</code> Function <a class="header-anchor" href="#tm-cidrsubnet-function" aria-label="Permalink to &quot;\`tm_cidrsubnet\` Function&quot;">​</a></h1><p><code>tm_cidrsubnet</code> calculates a subnet address within given IP network address prefix.</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tm_cidrsubnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prefix, newbits, netnum)</span></span></code></pre></div><p><code>prefix</code> must be given in CIDR notation, as defined in <a href="https://tools.ietf.org/html/rfc4632#section-3.1" target="_blank" rel="noreferrer">RFC 4632 section 3.1</a>.</p><p><code>newbits</code> is the number of additional bits with which to extend the prefix. For example, if given a prefix ending in <code>/16</code> and a <code>newbits</code> value of <code>4</code>, the resulting subnet address will have length <code>/20</code>.</p><p><code>netnum</code> is a whole number that can be represented as a binary integer with no more than <code>newbits</code> binary digits, which will be used to populate the additional bits added to the prefix.</p><p>This function accepts both IPv6 and IPv4 prefixes, and the result always uses the same addressing scheme as the given prefix.</p><p>Unlike the related function <a href="./tm_cidrsubnets"><code>tm_cidrsubnets</code></a>, <code>tm_cidrsubnet</code> allows you to give a specific network number to use. <code>tm_cidrsubnets</code> can allocate multiple network addresses at once, but numbers them automatically starting with zero.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>As a historical accident, this function interprets IPv4 address octets that have leading zeros as decimal numbers, which is contrary to some other systems which interpret them as octal. We have preserved this behavior for backward compatibility, but recommend against relying on this behavior.</p></div><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_cidrsubnet(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;172.16.0.0/12&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">172.18.0.0/16</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_cidrsubnet(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;10.1.2.0/24&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">10.1.2.240/28</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_cidrsubnet(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;fd00:fd12:3456:7890::/56&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 162</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fd00:fd12:3456:7800:a200::/72</span></span></code></pre></div><h2 id="netmasks-and-subnets" tabindex="-1">Netmasks and Subnets <a class="header-anchor" href="#netmasks-and-subnets" aria-label="Permalink to &quot;Netmasks and Subnets&quot;">​</a></h2><p>Using <code>tm_cidrsubnet</code> requires familiarity with some network addressing concepts.</p><p>The most important idea is that an IP address (whether IPv4 or IPv6) is fundamentally constructed from binary digits, even though we conventionally represent it as either four decimal octets (for IPv4) or a sequence of 16-bit hexadecimal numbers (for IPv6).</p><p>Taking our example above of <code>tm_cidrsubnet(&quot;10.1.2.0/24&quot;, 4, 15)</code>, the function will first convert the given IP address string into an equivalent binary representation:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>      10 .        1 .        2 .        0</span></span>
<span class="line"><span>00001010   00000001   00000010 | 00000000</span></span>
<span class="line"><span>         network               |   host</span></span></code></pre></div><p>The <code>/24</code> at the end of the prefix string specifies that the first 24 bits -- or, the first three octets -- of the address identify the network while the remaining bits (32 - 24 = 8 bits in this case) identify hosts within the network.</p><p>The CLI tool <a href="https://gitlab.com/ipcalc/ipcalc" target="_blank" rel="noreferrer"><code>ipcalc</code></a> is useful for visualizing CIDR prefixes as binary numbers. We can confirm the conversion above by providing the same prefix string to <code>ipcalc</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ ipcalc 10.1.2.0/24</span></span>
<span class="line"><span>Address:   10.1.2.0             00001010.00000001.00000010. 00000000</span></span>
<span class="line"><span>Netmask:   255.255.255.0 = 24   11111111.11111111.11111111. 00000000</span></span>
<span class="line"><span>Wildcard:  0.0.0.255            00000000.00000000.00000000. 11111111</span></span>
<span class="line"><span>=&gt;</span></span>
<span class="line"><span>Network:   10.1.2.0/24          00001010.00000001.00000010. 00000000</span></span>
<span class="line"><span>HostMin:   10.1.2.1             00001010.00000001.00000010. 00000001</span></span>
<span class="line"><span>HostMax:   10.1.2.254           00001010.00000001.00000010. 11111110</span></span>
<span class="line"><span>Broadcast: 10.1.2.255           00001010.00000001.00000010. 11111111</span></span>
<span class="line"><span>Hosts/Net: 254                   Class A, Private Internet</span></span></code></pre></div><p>This gives us some additional information but also confirms (using a slightly different notation) the conversion from decimal to binary and shows the range of possible host addresses in this network.</p><p>While <a href="./tm_cidrhost"><code>tm_cidrhost</code></a> allows calculating single host IP addresses, <code>tm_cidrsubnet</code> on the other hand creates a new network prefix <em>within</em> the given network prefix. In other words, it creates a subnet.</p><p>When we call <code>tm_cidrsubnet</code> we also pass two additional arguments: <code>newbits</code> and <code>netnum</code>. <code>newbits</code> decides how much longer the resulting prefix will be in bits; in our example here we specified <code>4</code>, which means that the resulting subnet will have a prefix length of 24 + 4 = 28 bits. We can imagine these bits breaking down as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>      10 .        1 .        2 .    ?        0</span></span>
<span class="line"><span>00001010   00000001   00000010 |   XXXX | 0000</span></span>
<span class="line"><span>         parent network        | netnum | host</span></span></code></pre></div><p>Four of the eight bits that were originally the &quot;host number&quot; are now being repurposed as the subnet number. The network prefix no longer falls on an exact octet boundary, so in effect we are now splitting the last decimal number in the IP address into two parts, using half of it to represent the subnet number and the other half to represent the host number.</p><p>The <code>netnum</code> argument then decides what number value to encode into those four new subnet bits. In our current example we passed <code>15</code>, which is represented in binary as <code>1111</code>, allowing us to fill in the <code>XXXX</code> segment in the above:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>      10 .        1 .        2 .    15       0</span></span>
<span class="line"><span>00001010   00000001   00000010 |   1111 | 0000</span></span>
<span class="line"><span>         parent network        | netnum | host</span></span></code></pre></div><p>To convert this back into normal decimal notation we need to recombine the two portions of the final octet. Converting <code>11110000</code> from binary to decimal gives 240, which can then be combined with our new prefix length of 28 to produce the result <code>10.1.2.240/28</code>. Again we can pass this prefix string to <code>ipcalc</code> to visualize it:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ ipcalc 10.1.2.240/28</span></span>
<span class="line"><span>Address:   10.1.2.240           00001010.00000001.00000010.1111 0000</span></span>
<span class="line"><span>Netmask:   255.255.255.240 = 28 11111111.11111111.11111111.1111 0000</span></span>
<span class="line"><span>Wildcard:  0.0.0.15             00000000.00000000.00000000.0000 1111</span></span>
<span class="line"><span>=&gt;</span></span>
<span class="line"><span>Network:   10.1.2.240/28        00001010.00000001.00000010.1111 0000</span></span>
<span class="line"><span>HostMin:   10.1.2.241           00001010.00000001.00000010.1111 0001</span></span>
<span class="line"><span>HostMax:   10.1.2.254           00001010.00000001.00000010.1111 1110</span></span>
<span class="line"><span>Broadcast: 10.1.2.255           00001010.00000001.00000010.1111 1111</span></span>
<span class="line"><span>Hosts/Net: 14                    Class A, Private Internet</span></span></code></pre></div><p>The new subnet has four bits available for host numbering, which means that there are 14 host addresses available for assignment once we subtract the network&#39;s own address and the broadcast address. You can thus use <a href="./tm_cidrhost"><code>tm_cidrhost</code></a> function to calculate those host addresses by providing it a value between 1 and 14:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>tm_cidrhost(&quot;10.1.2.240/28&quot;, 1)</span></span>
<span class="line"><span>10.1.2.241</span></span>
<span class="line"><span>tm_cidrhost(&quot;10.1.2.240/28&quot;, 14)</span></span>
<span class="line"><span>10.1.2.254</span></span></code></pre></div><p>For more information on CIDR notation and subnetting, see <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing" target="_blank" rel="noreferrer">Classless Inter-domain Routing</a>.</p><h2 id="related-functions" tabindex="-1">Related Functions <a class="header-anchor" href="#related-functions" aria-label="Permalink to &quot;Related Functions&quot;">​</a></h2><ul><li><a href="./tm_cidrhost"><code>tm_cidrhost</code></a> calculates the IP address for a single host within a given network address prefix.</li><li><a href="./tm_cidrnetmask"><code>tm_cidrnetmask</code></a> converts an IPv4 network prefix in CIDR notation into netmask notation.</li><li><a href="./tm_cidrsubnets"><code>tm_cidrsubnets</code></a> can allocate multiple consecutive addresses under a prefix at once, numbering them automatically.</li></ul>`,33),o=[i];function p(c,r,l,d,h,u){return a(),e("div",null,o)}const g=s(t,[["render",p]]);export{b as __pageData,g as default};
