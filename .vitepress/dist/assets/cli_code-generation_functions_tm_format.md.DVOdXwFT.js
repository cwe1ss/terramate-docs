import{_ as t,c as e,o as i,a4 as s}from"./chunks/framework.Bl20_RFa.js";const m=JSON.parse('{"title":"tm_format - Functions - Configuration Language","description":"The tm_format function produces a string by formatting a number of other values\\naccording to a specification string.","frontmatter":{"title":"tm_format - Functions - Configuration Language","description":"The tm_format function produces a string by formatting a number of other values\\naccording to a specification string."},"headers":[],"relativePath":"cli/code-generation/functions/tm_format.md","filePath":"cli/code-generation/functions/tm_format.md"}'),a={name:"cli/code-generation/functions/tm_format.md"},n=s(`<h1 id="tm-format-function" tabindex="-1"><code>tm_format</code> Function <a class="header-anchor" href="#tm-format-function" aria-label="Permalink to &quot;\`tm_format\` Function&quot;">​</a></h1><p>The <code>tm_format</code> function produces a string by formatting a number of other values according to a specification string. It is similar to The <code>printf</code> function in C, and other similar functions in other programming languages.</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tm_format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spec, values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_format(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Hello, %s!&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Ander&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Ander!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_format(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;There are %d lights&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lights</span></span></code></pre></div><p>Simple format verbs like <code>%s</code> and <code>%d</code> behave similarly to template interpolation syntax, which is often more readable.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_format(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Hello, %s!&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> var.name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Valentina!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Valentina!</span></span></code></pre></div><p>The formatting verb <code>%#v</code> accepts a value of any type and presents it using JSON encoding, similar to jsonencode.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_format(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;%#v&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_format(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;%#v&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_format(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;%#v&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_format(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;%#v&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:1}&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_format(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;%#v&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [true])</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;[true]&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_format(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;%#v&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;null&quot;</span></span></code></pre></div><p>The <code>tm_format</code> function is most useful when you use more complex format specifications.</p><h2 id="specification-syntax" tabindex="-1">Specification Syntax <a class="header-anchor" href="#specification-syntax" aria-label="Permalink to &quot;Specification Syntax&quot;">​</a></h2><p>The specification is a string that includes formatting verbs that are introduced with the <code>%</code> character. The function call must then have one additional argument for each verb sequence in the specification. The verbs are matched with consecutive arguments and formatted as directed, as long as each given argument is convertible to the type required by the format verb.</p><p>By default, <code>%</code> sequences consume successive arguments starting with the first. Introducing a <code>[n]</code> sequence immediately before the verb letter, where <code>n</code> is a decimal integer, explicitly chooses a particular value argument by its one-based index. Subsequent calls without an explicit index will then proceed with <code>n</code>+1, <code>n</code>+2, etc.</p><p>The function produces an error if the format string requests an impossible conversion or access more arguments than are given. An error is produced also for an unsupported format verb.</p><h3 id="verbs" tabindex="-1">Verbs <a class="header-anchor" href="#verbs" aria-label="Permalink to &quot;Verbs&quot;">​</a></h3><p>The specification may contain the following verbs.</p><table><thead><tr><th>Verb</th><th>Result</th></tr></thead><tbody><tr><td><code>%%</code></td><td>Literal percent sign, consuming no value.</td></tr><tr><td><code>%v</code></td><td>Default formatting based on the <a href="#default-format-verbs">value type</a>. Accepts all types, including items of <code>null</code>, <code>list</code>, and <code>map</code> types.</td></tr><tr><td><code>%#v</code></td><td>JSON serialization of the value, as with <code>jsonencode</code>. Accepts all types, including items of <code>null</code>, <code>list</code>, and <code>map</code> types.</td></tr><tr><td><code>%t</code></td><td>Convert to boolean and produce <code>true</code> or <code>false</code>.</td></tr><tr><td><code>%b</code></td><td>Convert to integer number and produce binary representation.</td></tr><tr><td><code>%d</code></td><td>Convert to integer number and produce decimal representation.</td></tr><tr><td><code>%o</code></td><td>Convert to integer number and produce octal representation.</td></tr><tr><td><code>%x</code></td><td>Convert to integer number and produce hexadecimal representation with lowercase letters.</td></tr><tr><td><code>%X</code></td><td>Like <code>%x</code>, but use uppercase letters.</td></tr><tr><td><code>%e</code></td><td>Convert to number and produce scientific notation, like <code>-1.234456e+78</code>.</td></tr><tr><td><code>%E</code></td><td>Like <code>%e</code>, but use an uppercase <code>E</code> to introduce the exponent.</td></tr><tr><td><code>%f</code></td><td>Convert to number and produce decimal fraction notation with no exponent, like <code>123.456</code>.</td></tr><tr><td><code>%g</code></td><td>Like <code>%e</code> for large exponents or like <code>%f</code> otherwise.</td></tr><tr><td><code>%G</code></td><td>Like <code>%E</code> for large exponents or like <code>%f</code> otherwise.</td></tr><tr><td><code>%s</code></td><td>Convert to string and insert the string&#39;s characters.</td></tr><tr><td><code>%q</code></td><td>Convert to string and produce a JSON quoted string representation.</td></tr></tbody></table><h3 id="default-format-verbs" tabindex="-1">Default Format Verbs <a class="header-anchor" href="#default-format-verbs" aria-label="Permalink to &quot;Default Format Verbs&quot;">​</a></h3><p>When <code>%v</code> is used, Terramate chooses the appropriate format verb based on the value type.</p><table><thead><tr><th>Type</th><th>Verb</th></tr></thead><tbody><tr><td><code>string</code></td><td><code>%s</code></td></tr><tr><td><code>number</code></td><td><code>%g</code></td></tr><tr><td><code>bool</code></td><td><code>%t</code></td></tr><tr><td>any other</td><td><code>%#v</code></td></tr></tbody></table><p>Null values produce the string <code>null</code> if formatted with <code>%v</code> or <code>%#v</code>, and cause an error for other verbs.</p><h3 id="width-modifier" tabindex="-1">Width Modifier <a class="header-anchor" href="#width-modifier" aria-label="Permalink to &quot;Width Modifier&quot;">​</a></h3><p>Use a width modifier with an optional decimal number immediately preceding the verb letter to specify how many characters will be used to represent the value. You can specify precision after the (optional) width with a period (<code>.</code>) followed by a decimal number. If width or precision are omitted, Terramate selects default values based on the given value.</p><p>The following examples demonstrate example use cases for the width modifier.</p><table><thead><tr><th>Sequence</th><th>Result</th></tr></thead><tbody><tr><td><code>%f</code></td><td>Default width and precision.</td></tr><tr><td><code>%9f</code></td><td>Width 9, default precision.</td></tr><tr><td><code>%.2f</code></td><td>Default width, precision 2.</td></tr><tr><td><code>%9.2f</code></td><td>Width 9, precision 2.</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Width and precision modifiers with non-numeric types such as strings (<code>%s</code>) are interpreted differently. Setting either width or precision to zero is the same as not including them at all.</p></div><h3 id="additional-format-options" tabindex="-1">Additional Format Options <a class="header-anchor" href="#additional-format-options" aria-label="Permalink to &quot;Additional Format Options&quot;">​</a></h3><p>Use the following symbols immediately after the <code>%</code> symbol to set additional formatting requirements.</p><table><thead><tr><th>Symbol</th><th>Result</th></tr></thead><tbody><tr><td>space</td><td>Leave a space where the sign would be if a number is positive.</td></tr><tr><td><code>+</code></td><td>Show the sign of a number even if it is positive.</td></tr><tr><td><code>-</code></td><td>Pad the width with spaces on the right rather than the left.</td></tr><tr><td><code>0</code></td><td>Pad the width with leading zeros rather than spaces.</td></tr></tbody></table><h2 id="related-functions" tabindex="-1">Related Functions <a class="header-anchor" href="#related-functions" aria-label="Permalink to &quot;Related Functions&quot;">​</a></h2><ul><li><a href="./tm_formatdate"><code>tm_formatdate</code></a> is a specialized formatting function for human-readable timestamps.</li><li><a href="./tm_formatlist"><code>tm_formatlist</code></a> uses the same specification syntax to produce a list of strings.</li></ul>`,31),o=[n];function d(r,h,l,c,p,k){return i(),e("div",null,o)}const g=t(a,[["render",d]]);export{m as __pageData,g as default};
