import{_ as e,c as t,o as i,a4 as a}from"./chunks/framework.Bl20_RFa.js";const m=JSON.parse('{"title":"tm_file - Functions - Configuration Language","description":"The tm_file function reads the contents of the file at the given path and\\nreturns them as a string.","frontmatter":{"title":"tm_file - Functions - Configuration Language","description":"The tm_file function reads the contents of the file at the given path and\\nreturns them as a string."},"headers":[],"relativePath":"cli/code-generation/functions/tm_file.md","filePath":"cli/code-generation/functions/tm_file.md"}'),s={name:"cli/code-generation/functions/tm_file.md"},n=a('<h1 id="tm-file-function" tabindex="-1"><code>tm_file</code> Function <a class="header-anchor" href="#tm-file-function" aria-label="Permalink to &quot;`tm_file` Function&quot;">​</a></h1><p><code>tm_file</code> reads the contents of a file at the given path and returns them as a string.</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tm_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path)</span></span></code></pre></div><p>Strings in the Terraform language are sequences of Unicode characters, so this function will interpret the file contents as UTF-8 encoded text and return the resulting Unicode characters. If the file contains invalid UTF-8 sequences then this function will produce an error.</p><p>This function can be used only with files that already exist on disk at the beginning of a Terraform run. Functions do not participate in the dependency graph, so this function cannot be used with files that are generated dynamically during a Terraform operation. We do not recommend using dynamic local files in Terraform configurations, but in rare situations where this is necessary you can use <a href="https://registry.terraform.io/providers/hashicorp/local/latest/docs/data-sources/file" target="_blank" rel="noreferrer">the <code>local_file</code> data source</a> to read files while respecting resource dependencies.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_file(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">module</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">}/hello.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> World</span></span></code></pre></div><h2 id="related-functions" tabindex="-1">Related Functions <a class="header-anchor" href="#related-functions" aria-label="Permalink to &quot;Related Functions&quot;">​</a></h2><ul><li><a href="./tm_filebase64"><code>tm_filebase64</code></a> also reads the contents of a given file, but returns the raw bytes in that file Base64-encoded, rather than interpreting the contents as UTF-8 text.</li><li><a href="./tm_fileexists"><code>tm_fileexists</code></a> determines whether a file exists at a given path.</li><li><a href="./tm_templatefile"><code>tm_templatefile</code></a> renders using a file from disk as a template.</li></ul>',9),l=[n];function o(r,h,c,d,p,f){return i(),t("div",null,l)}const g=e(s,[["render",o]]);export{m as __pageData,g as default};
