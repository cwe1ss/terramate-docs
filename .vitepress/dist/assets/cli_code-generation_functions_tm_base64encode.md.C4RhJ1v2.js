import{_ as e,c as a,o as t,a4 as n}from"./chunks/framework.Bl20_RFa.js";const g=JSON.parse('{"title":"tm_base64encode - Functions - Configuration Language","description":"The tm_base64encode function applies Base64 encoding to a string.","frontmatter":{"title":"tm_base64encode - Functions - Configuration Language","description":"The tm_base64encode function applies Base64 encoding to a string."},"headers":[],"relativePath":"cli/code-generation/functions/tm_base64encode.md","filePath":"cli/code-generation/functions/tm_base64encode.md"}'),s={name:"cli/code-generation/functions/tm_base64encode.md"},o=n('<h1 id="tm-base64encode-function" tabindex="-1"><code>tm_base64encode</code> Function <a class="header-anchor" href="#tm-base64encode-function" aria-label="Permalink to &quot;`tm_base64encode` Function&quot;">​</a></h1><p><code>tm_base64encode</code> applies Base64 encoding to a string.</p><p>Terraform uses the &quot;standard&quot; Base64 alphabet as defined in <a href="https://tools.ietf.org/html/rfc4648#section-4" target="_blank" rel="noreferrer">RFC 4648 section 4</a>.</p><p>Strings in the Terraform language are sequences of unicode characters rather than bytes, so this function will first encode the characters from the string as UTF-8, and then apply Base64 encoding to the result.</p><p>The Terraform language applies Unicode normalization to all strings, and so passing a string through <code>tm_base64decode</code> and then <code>tm_base64encode</code> may not yield the original result exactly.</p><p>While we do not recommend manipulating large, raw binary data in the Terraform language, Base64 encoding is the standard way to represent arbitrary byte sequences, and so resource types that accept or return binary data will use Base64 themselves, and so this function exists primarily to allow string data to be easily provided to resource types that expect Base64 bytes.</p><p><code>tm_base64encode</code> is, in effect, a shorthand for calling <a href="./tm_textencodebase64"><code>tm_textencodebase64</code></a> with the encoding name set to <code>UTF-8</code>.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_base64encode(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SGVsbG8gV29ybGQ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span></code></pre></div><h2 id="related-functions" tabindex="-1">Related Functions <a class="header-anchor" href="#related-functions" aria-label="Permalink to &quot;Related Functions&quot;">​</a></h2><ul><li><a href="./tm_base64decode"><code>tm_base64decode</code></a> performs the opposite operation, decoding Base64 data and interpreting it as a UTF-8 string.</li><li><a href="./tm_textencodebase64"><code>tm_textencodebase64</code></a> is a more general function that supports character encodings other than UTF-8.</li><li><a href="./tm_base64gzip"><code>tm_base64gzip</code></a> applies gzip compression to a string and returns the result with Base64 encoding all in one operation.</li><li><a href="./tm_filebase64"><code>tm_filebase64</code></a> reads a file from the local filesystem and returns its raw bytes with Base64 encoding, without creating an intermediate Unicode string.</li></ul>',11),i=[o];function r(c,d,l,h,p,m){return t(),a("div",null,i)}const _=e(s,[["render",r]]);export{g as __pageData,_ as default};
