import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.Bl20_RFa.js";const E=JSON.parse('{"title":"tm_csvdecode - Functions - Configuration Language","description":"The tm_csvdecode function decodes CSV data into a list of maps.","frontmatter":{"title":"tm_csvdecode - Functions - Configuration Language","description":"The tm_csvdecode function decodes CSV data into a list of maps."},"headers":[],"relativePath":"cli/code-generation/functions/tm_csvdecode.md","filePath":"cli/code-generation/functions/tm_csvdecode.md"}'),n={name:"cli/code-generation/functions/tm_csvdecode.md"},t=e(`<h1 id="tm-csvdecode-function" tabindex="-1"><code>tm_csvdecode</code> Function <a class="header-anchor" href="#tm-csvdecode-function" aria-label="Permalink to &quot;\`tm_csvdecode\` Function&quot;">​</a></h1><p><code>tm_csvdecode</code> decodes a string containing CSV-formatted data and produces a list of maps representing that data.</p><p>CSV is <em>Comma-separated Values</em>, an encoding format for tabular data. There are many variants of CSV, but this function implements the format defined in <a href="https://tools.ietf.org/html/rfc4180" target="_blank" rel="noreferrer">RFC 4180</a>.</p><p>The first line of the CSV data is interpreted as a &quot;header&quot; row: the values given are used as the keys in the resulting maps. Each subsequent line becomes a single map in the resulting list, matching the keys from the header row with the given values by index. All lines in the file must contain the same number of fields, or this function will produce an error.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_csvdecode(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;a,b,c\\n1,2,3\\n4,5,6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;a&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;b&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;c&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;a&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;4&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;b&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;5&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;c&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;6&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="use-with-the-for-each-meta-argument" tabindex="-1">Use with the <code>for_each</code> meta-argument <a class="header-anchor" href="#use-with-the-for-each-meta-argument" aria-label="Permalink to &quot;Use with the \`for_each\` meta-argument&quot;">​</a></h2><p>You can use the result of <code>tm_csvdecode</code> with <a href="https://developer.hashicorp.com/terraform/language/meta-arguments/for_each" target="_blank" rel="noreferrer">the <code>for_each</code> meta-argument</a> to describe a collection of similar objects whose differences are described by the rows in the given CSV file.</p><p>There must be one column in the CSV file that can serve as a unique id for each row, which we can then use as the tracking key for the individual instances in the <code>for_each</code> expression. For example:</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">locals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # We&#39;ve included this inline to create a complete example, but in practice</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # this is more likely to be loaded from a file using the &quot;file&quot; function.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  csv_data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;-CSV</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    local_id,instance_type,ami</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    foo1,t2.micro,ami-54d2a63b</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    foo2,t2.micro,ami-54d2a63b</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    foo3,t2.micro,ami-54d2a63b</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    bar1,m3.large,ami-54d2a63b</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  CSV</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  instances</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tm_csvdecode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">csv_data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resource</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;aws_instance&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  for_each</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instances </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inst</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">local_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inst }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  instance_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> each</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance_type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ami</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> each</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ami</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The <code>for</code> expression in our <code>for_each</code> argument transforms the list produced by <code>tm_csvdecode</code> into a map using the <code>local_id</code> as a key, which tells Terraform to use the <code>local_id</code> value to track each instance it creates. Terraform will create and manage the following instance addresses:</p><ul><li><code>aws_instance.example[&quot;foo1&quot;]</code></li><li><code>aws_instance.example[&quot;foo2&quot;]</code></li><li><code>aws_instance.example[&quot;foo3&quot;]</code></li><li><code>aws_instance.example[&quot;bar1&quot;]</code></li></ul><p>If you modify a row in the CSV on a subsequent plan, Terraform will interpret that as an update to the existing object as long as the <code>local_id</code> value is unchanged. If you add or remove rows from the CSV then Terraform will plan to create or destroy associated instances as appropriate.</p><p>If there is no reasonable value you can use as a unique identifier in your CSV then you could instead use <a href="https://developer.hashicorp.com/terraform/language/meta-arguments/count" target="_blank" rel="noreferrer">the <code>count</code> meta-argument</a> to define an object for each CSV row, with each one identified by its index into the list returned by <code>tm_csvdecode</code>. However, in that case any future updates to the CSV may be disruptive if they change the positions of particular objects in the list. We recommend using <code>for_each</code> with a unique id column to make behavior more predictable on future changes.</p>`,14),h=[t];function l(o,p,r,c,d,k){return a(),i("div",null,h)}const g=s(n,[["render",l]]);export{E as __pageData,g as default};
