import{_ as s,c as a,o as e,a4 as i}from"./chunks/framework.Bl20_RFa.js";const g=JSON.parse('{"title":"Context-based Variables","description":"Learn how to use the lets block to define context-based, temporary variables that can be used in code generation blocks.","frontmatter":{"title":"Context-based Variables","description":"Learn how to use the lets block to define context-based, temporary variables that can be used in code generation blocks."},"headers":[],"relativePath":"cli/code-generation/variables/lets.md","filePath":"cli/code-generation/variables/lets.md"}'),t={name:"cli/code-generation/variables/lets.md"},l=i(`<h1 id="context-based-variables" tabindex="-1">Context-based Variables <a class="header-anchor" href="#context-based-variables" aria-label="Permalink to &quot;Context-based Variables&quot;">â€‹</a></h1><p>Terramate Lets Variables represent context-based variables that can be used to compute local blocks available in the current code generation block only to not pollute the global namespace with temporary or intermediate variables.</p><p>Available contexts are:</p><ul><li>within <a href="./../generate-hcl"><code>generate_hcl</code></a> blocks</li><li>within <a href="./../generate-file"><code>generate_file</code></a> blocks</li></ul><p>They are defined the same way as <a href="./globals">Global Variables</a> and support similar features.</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">variable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The following key differences exist compared to Terramate Globals:</p><ul><li>they are only available in some defined context e.g., <code>generate_hcl</code> and <code>generate_file</code></li><li>they do not support labels</li><li>they support the additional <code>let</code> namespace in expressions</li></ul><p>Example:</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate_file</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;file.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # let.json is available in the current generate_file block only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tm_jsonencode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,10),n=[l];function h(p,o,r,k,d,c){return e(),a("div",null,n)}const b=s(t,[["render",h]]);export{g as __pageData,b as default};
