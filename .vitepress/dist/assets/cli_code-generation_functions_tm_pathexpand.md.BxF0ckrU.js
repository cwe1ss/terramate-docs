import{_ as e,c as t,o as n,a4 as s}from"./chunks/framework.Bl20_RFa.js";const f=JSON.parse(`{"title":"tm_pathexpand - Functions - Configuration Language","description":"The tm_pathexpand function expands a leading ~ character to the current user's\\nhome directory.","frontmatter":{"title":"tm_pathexpand - Functions - Configuration Language","description":"The tm_pathexpand function expands a leading ~ character to the current user's\\nhome directory."},"headers":[],"relativePath":"cli/code-generation/functions/tm_pathexpand.md","filePath":"cli/code-generation/functions/tm_pathexpand.md"}`),a={name:"cli/code-generation/functions/tm_pathexpand.md"},i=s(`<h1 id="tm-pathexpand-function" tabindex="-1"><code>tm_pathexpand</code> Function <a class="header-anchor" href="#tm-pathexpand-function" aria-label="Permalink to &quot;\`tm_pathexpand\` Function&quot;">​</a></h1><p><code>tm_pathexpand</code> takes a filesystem path that might begin with a <code>~</code> segment, and if so it replaces that segment with the current user&#39;s home directory path.</p><p>This function works only with the path string and does not access the filesystem itself. It is therefore unable to take into account filesystem features such as symlinks.</p><p>If the leading segment in the path is not <code>~</code> then the given path is returned unmodified.</p><p>Using this function in resource arguments will cause spurious diffs if the same configuration is run by multiple users with different home directory paths, or used on different host operating systems. We recommend using this function only for transient values, such as in <code>connection</code> and <code>provisioner</code> blocks to locate SSH keys, etc.</p><p>The rules for determining the &quot;home directory&quot; for the current user vary depending on the host operating system.</p><p><strong>For Unix systems</strong>, the following sources are consulted, in order of preference:</p><ul><li>The <code>HOME</code> environment variable.</li><li>The result of running <code>getent passwd</code> followed by the Terraform process uid.</li><li>The result of running <code>cd &amp;&amp; pwd</code> in <code>sh</code>.</li></ul><p><strong>For Windows systems</strong>, there is not really the concept of a home directory in the same sense as on Unix, but the following sources are consulted in order of preference:</p><ul><li>The <code>HOME</code> environment variable.</li><li>The <code>HOMEDRIVE</code> and <code>HOMEPATH</code> environment variables, if both are set.</li><li>The <code>USERPROFILE</code> environment variable.</li></ul><p>The exact rules employed for each operating system may change in future releases of Terraform.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_pathexpand(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;~/.ssh/id_rsa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home/steve/.ssh/id_rsa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_pathexpand(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;/etc/resolv.conf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/etc/resolv.conf</span></span></code></pre></div>`,13),o=[i];function r(c,h,d,p,l,u){return n(),t("div",null,o)}const g=e(a,[["render",r]]);export{f as __pageData,g as default};
