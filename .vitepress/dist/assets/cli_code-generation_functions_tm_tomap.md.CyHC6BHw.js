import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.Bl20_RFa.js";const F=JSON.parse('{"title":"tm_tomap - Functions - Configuration Language","description":"The tm_tomap function converts a value to a map.","frontmatter":{"title":"tm_tomap - Functions - Configuration Language","description":"The tm_tomap function converts a value to a map."},"headers":[],"relativePath":"cli/code-generation/functions/tm_tomap.md","filePath":"cli/code-generation/functions/tm_tomap.md"}'),n={name:"cli/code-generation/functions/tm_tomap.md"},e=t(`<h1 id="tm-tomap-function" tabindex="-1"><code>tm_tomap</code> Function <a class="header-anchor" href="#tm-tomap-function" aria-label="Permalink to &quot;\`tm_tomap\` Function&quot;">​</a></h1><p><code>tm_tomap</code> converts its argument to a map value.</p><p>Explicit type conversions are rarely necessary in Terraform because it will convert types automatically where required. Use the explicit type conversion functions only to normalize types returned in module outputs.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_tomap(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot; = 1, &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot; = 2})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot; = 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot; = 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">}</span></span></code></pre></div><p>Since Terraform&#39;s concept of a map requires all of the elements to be of the same type, mixed-typed elements will be converted to the most general type:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tm_tomap(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot; = &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;, &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot; = true})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot; = &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot; = &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">}</span></span></code></pre></div>`,7),p=[e];function l(h,o,k,r,c,d){return a(),i("div",null,p)}const m=s(n,[["render",l]]);export{F as __pageData,m as default};
