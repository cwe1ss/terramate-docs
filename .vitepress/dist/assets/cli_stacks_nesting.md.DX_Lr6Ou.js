import{_ as e,c as t,o as a,a4 as s}from"./chunks/framework.Bl20_RFa.js";const n="/assets/nested-stacks.BpZcLktx.png",i="/assets/monostack.BjmT2yQc.png",r="/assets/nested-stacks.DYmu1Z4w.png",o="/assets/changed-nested-stacks.C975TBow.png",b=JSON.parse('{"title":"Nesting Stacks","description":"Learn how nested Stacks allow you to map your infrastructure code as a tree, leading to a natural organization of your infrastructure resources with Infrastructure as Code.","frontmatter":{"title":"Nesting Stacks","description":"Learn how nested Stacks allow you to map your infrastructure code as a tree, leading to a natural organization of your infrastructure resources with Infrastructure as Code."},"headers":[],"relativePath":"cli/stacks/nesting.md","filePath":"cli/stacks/nesting.md"}'),c={name:"cli/stacks/nesting.md"},l=s('<h1 id="nesting-stacks" tabindex="-1">Nesting Stacks <a class="header-anchor" href="#nesting-stacks" aria-label="Permalink to &quot;Nesting Stacks&quot;">​</a></h1><p>Terramate Stacks can be nested, allowing you to map your infrastructure code as a tree, which leads to a natural organization of your infrastructure resources with Infrastructure as Code.</p><h2 id="what-are-nested-stacks" tabindex="-1">What are nested Stacks? <a class="header-anchor" href="#what-are-nested-stacks" aria-label="Permalink to &quot;What are nested Stacks?&quot;">​</a></h2><p>Nesting stacks is a recommended best practice for grouping related infrastructure, such as environments or services, that should be treated as a unit.</p><p>By nesting stacks instead of managing all related infrastructure in a single stack, we can preserve the benefits of stacks even when working in large environments.</p><p>A simple example is launching an EC2 instance in AWS. The instance must be launched in a subnet, which must belong to a VPC. If we illustrate this as nested stacks, the architecture would look something like this.</p><img src="'+n+`" width="700px" alt="Terramate Nested Stacks Overview"><p>Which could be represented in a Terramate stack hierarchy as:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/vpc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  /network_acl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  /internet_gateway</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  /subnet</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    /network_interface</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    /ec2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  /route_table</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  /security_group</span></span></code></pre></div><p>This tree structure following the directory hierarchy has three significant features:</p><ul><li><strong>The configuration is inherited from left to right:</strong> a <a href="./../code-generation/variables/globals">Global Variable</a> defined in one stack is automatically inherited by all nested child stacks. This removes the need for brittle code, such as hardcoded values and allows you to have an ever-expanding <em>context</em> for resources as you descend further into the stack tree.</li><li><strong>Execution of commands happens left to right (e.g. <code>terraform apply</code>):</strong> In the example mentioned above, the VPC will automatically be created before the subnet using the <a href="https://en.wikipedia.org/wiki/Breadth-first_search" target="_blank" rel="noreferrer">breadth-first search algorithm</a>, which will be created before the EC2 instance. This means a great reduction in explicit dependencies: you do not need to specify that the subnet depends upon the existing VPC - it&#39;s a natural outcome of the hierarchy (though we also support explicit dependencies with wants, before and after attributes in <a href="./configuration">stack configuration</a>).</li><li><strong>Cloning of stacks:</strong> nested stacks can represent whole environments, services or single resources. A neat feature in Terramate is that stacks and nested stacks can easily be cloned using the <a href="./../cmdline/experimental/experimental-clone">clone</a> command.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>terramate run</code> executed commands in stacks left-to-right using the <a href="https://en.wikipedia.org/wiki/Breadth-first_search" target="_blank" rel="noreferrer">breadth-first search algorithm</a>. However, this behavior can be reversed using the <code>--reverse</code> algorithm which can be useful in certain scenarios, e.g. when using <code>terraform destroy</code> . For details please see the <a href="./../cmdline/run">run</a> command documentation.</p></div><h2 id="performance-improvements" tabindex="-1">Performance Improvements <a class="header-anchor" href="#performance-improvements" aria-label="Permalink to &quot;Performance Improvements&quot;">​</a></h2><p>Nesting stacks can lead to faster execution runtimes and reduced blast radius. For example, the following diagram illustrates a single stack that manages all infrastructure code, state and configuration required to deploy a VPC.</p><img src="`+i+'" width="700px" alt="Example that shows a stack that manages multiple resources"><p>In comparison, managing a complex service such as a VPC as a nested stack would result in multiple child stacks, each containing an isolated subset of the infrastructure code, state, and configuration required to manage all resources related to the VPC.</p><img src="'+r+'" width="700px" alt="Example that shows a nested stack"><p>This pattern allows us to use the <a href="./../change-detection/">Terramate Change Detection</a>. For example, if we were to update the &quot;Internet Gateway&quot; after the initial deployment of the VPC, Terramate CLI can detect that only this specific child stack has changed using <code>terramate run --changed -- &lt;COMMAND&gt;</code>.</p><img src="'+o+'" width="700px" alt="Example that shows a nested stack which contains a single changed stack">',19),h=[l];function d(p,u,g,m,k,f){return a(),t("div",null,h)}const _=e(c,[["render",d]]);export{b as __pageData,_ as default};
